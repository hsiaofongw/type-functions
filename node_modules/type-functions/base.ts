/** 取 Tuple 首元素 */
export type Head<T extends [...any]> = T extends [infer HeadT, ...infer _]
  ? HeadT
  : never;

/** 取 Tuple 余项 */
export type Rest<T extends [...any]> = T extends [infer _, ...infer R] ? R : [];

/** 子集关系判定 */
export type Extends<T, S> = T extends S ? true : false;

/** 分支范型 */
export type If<Cond, TrueT, FalseT> = Cond extends true ? TrueT : FalseT;

/** 或 */
export type Or<Cond1, Cond2> = Extends<true, Cond1 | Cond2>;

/** 否 */
export type Not<Cond> = If<Extends<true, Cond>, false, true>;

/** 与 */
export type And<Cond1, Cond2> = Not<Extends<false, Cond1 | Cond2>>;

/** 等性判定 */
export type EqualTest<T, S> = And<Extends<T, S>, Extends<S, T>>;

/** 判定联合类型中是否包含 null 或者 undefined */
export type NullableTest<T> = Or<Extends<null, T>, Extends<undefined, T>>;
