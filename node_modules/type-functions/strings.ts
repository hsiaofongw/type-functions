import { Plus } from "./numbers";
import { ConcatTuple } from "./tuples";
import { ConstructObjectTypeByKey } from "./objects";

/** 字符串连接 */
export type ConcatString<A extends string, B extends string> = `${A}${B}`;

/** 字符串前缀提取 */
export type ExtractSubstring<
  Text,
  Suffix extends string
> = Text extends `${infer Prefix}${Suffix}` ? Prefix : never;

/** 取首字符 */
export type FirstChar<T extends string> =
  T extends `${infer HeadChar}${infer _}` ? HeadChar : never;

/** 取去掉首字符后的剩余字符串 */
export type RestStr<T extends string> = T extends `${infer _}${infer R}`
  ? R
  : never;

/** 字符串到字符元组的转换 */
export type StrToChars<T extends string> = T extends ""
  ? []
  : FirstChar<T> extends string
  ? RestStr<T> extends string
    ? [FirstChar<T>, ...StrToChars<RestStr<T>>]
    : [FirstChar<T>]
  : [];

/** 查找子串，返回子串首次出现的 offset 或者 -1. */
export type FindSubStr<
  Text extends string,
  PatternStr extends string
> = Text extends ""
  ? PatternStr extends ""
    ? 0
    : -1
  : Text extends `${PatternStr}${infer _}`
  ? 0
  : RestStr<Text> extends string
  ? FindSubStr<RestStr<Text>, PatternStr> extends -1
    ? -1
    : Plus<1, FindSubStr<RestStr<Text>, PatternStr>>
  : never;

type SpaceChars = " " | "\n" | "\t";

export type IsSpaceChar<T extends string> = T extends SpaceChars ? true : false;

type SplitCharImpl<
  Text extends string,
  Buffer extends string,
  Words extends [...any]
> = Text extends ""
  ? Buffer extends ""
    ? Words
    : ConcatTuple<Words, [Buffer]>
  : Text extends `${SpaceChars}${infer Rest}`
  ? SplitCharImpl<
      Rest,
      "",
      Buffer extends "" ? Words : ConcatTuple<Words, [Buffer]>
    >
  : Text extends `${infer Head}${infer Rest}`
  ? SplitCharImpl<Rest, ConcatString<Buffer, Head>, Words>
  : never;

/** 切分字符串（暂不支持指定切分 pattern，默认切分 pattern 是 \s） */
export type SplitStrBySpace<T extends string> = SplitCharImpl<T, "", []>;

type TokenType = "num" | "+" | "-" | "*" | "/";

type TypedToken<T extends string, C extends string> = {
  type: T;
  content: C;
};

type Drop<T extends string, U extends string> = keyof Omit<
  ConstructObjectTypeByKey<U, any>,
  T
>;

type TypingTokens<
  Words extends [...any],
  TokenTypes extends string,
  DefaultToken extends string,
  Tokens extends [...any] = []
> = Words extends [infer Word, ...infer Rest]
  ? Word extends string
    ? Word extends Drop<DefaultToken, TokenTypes>
      ? TypingTokens<
          Rest,
          TokenTypes,
          DefaultToken,
          ConcatTuple<Tokens, [TypedToken<Word, Word>]>
        >
      : TypingTokens<
          Rest,
          TokenTypes,
          DefaultToken,
          ConcatTuple<Tokens, [TypedToken<DefaultToken, Word>]>
        >
    : TypingTokens<Rest, TokenTypes, DefaultToken, Tokens>
  : Tokens;

type Expr = "ab + c / 2 * 3 - 4 + 5";
type Tokens = TypingTokens<SplitStrBySpace<Expr>, TokenType, "num">;
type T0 = Tokens[0];
type T1 = Tokens[1];
type T2 = Tokens[2];
type T3 = Tokens[3];
type T4 = Tokens[4];
type T5 = Tokens[5];
type T6 = Tokens[6];
type T7 = Tokens[7];
type T8 = Tokens[8];
type T9 = Tokens[9];
type T10 = Tokens[10];
