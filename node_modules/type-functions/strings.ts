import { Plus } from "./numbers";

/** 字符串连接 */
export type ConcatString<A extends string, B extends string> = `${A}${B}`;

/** 字符串前缀提取 */
export type ExtractSubstring<
  Text,
  Suffix extends string
> = Text extends `${infer Prefix}${Suffix}` ? Prefix : never;

/** 取首字符 */
export type FirstChar<T extends string> =
  T extends `${infer HeadChar}${infer _}` ? HeadChar : never;

/** 取去掉首字符后的剩余字符串 */
export type RestStr<T extends string> = T extends `${infer _}${infer R}`
  ? R
  : never;

/** 字符串到字符元组的转换 */
export type StrToChars<T extends string> = T extends ""
  ? []
  : FirstChar<T> extends string
  ? RestStr<T> extends string
    ? [FirstChar<T>, ...StrToChars<RestStr<T>>]
    : [FirstChar<T>]
  : [];

/** 查找子串，返回子串首次出现的 offset 或者 -1. */
export type FindSubStr<
  Text extends string,
  PatternStr extends string
> = Text extends ""
  ? PatternStr extends ""
    ? 0
    : -1
  : Text extends `${PatternStr}${infer _}`
  ? 0
  : RestStr<Text> extends string
  ? FindSubStr<RestStr<Text>, PatternStr> extends -1
    ? -1
    : Plus<1, FindSubStr<RestStr<Text>, PatternStr>>
  : never;
