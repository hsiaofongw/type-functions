import { IsTupleLengthEqualOrGreaterThan, MakeTuple } from "./tuples";
import { Rest } from "./base";

/** 比较数字的大小 */
export type GreaterThanOrEqual<
  X extends number,
  Y extends number
> = IsTupleLengthEqualOrGreaterThan<MakeTuple<X>, MakeTuple<Y>>;

type GetMinImpl<
  MinValue extends number,
  LhsArray extends [...any],
  RhsArray extends [...any]
> = RhsArray extends []
  ? { minValue: MinValue; restArray: LhsArray }
  : RhsArray extends [infer HeadT, ...infer RestT]
  ? HeadT extends number
    ? GreaterThanOrEqual<MinValue, HeadT> extends true
      ? GetMinImpl<HeadT, [MinValue, ...LhsArray], RestT>
      : GetMinImpl<MinValue, [HeadT, ...LhsArray], RestT>
    : GetMinImpl<MinValue, LhsArray, RestT>
  : never;

/** 取非空数字元组的最小元素 */
export type GetMin<T> = T extends []
  ? never
  : T extends [infer HeadT, ...infer Rest]
  ? HeadT extends number
    ? GetMinImpl<HeadT, [], Rest>
    : GetMin<Rest>
  : never;

/** 对数字元组进行排序 */
export type SortNumsAscending<NumsT> = NumsT extends []
  ? []
  : NumsT extends [infer HeadT, ...infer RestT]
  ? HeadT extends number
    ? [
        GetMin<[HeadT, ...RestT]>["minValue"],
        ...SortNumsAscending<GetMin<[HeadT, ...RestT]>["restArray"]>
      ]
    : SortNumsAscending<RestT>
  : never;

/** 对输入的数字加 1 */
export type Increase<N extends number> = [...MakeTuple<N>, undefined]["length"];

/** 对输入的数字减去 1 */
export type Decrease<N extends number> = N extends 0
  ? never
  : Rest<MakeTuple<N>> extends [...any]
  ? Rest<MakeTuple<N>>["length"]
  : never;

/** 两个自然数相加 */
export type Plus<A extends number, B extends number> = B extends 0
  ? A
  : Decrease<B> extends number
  ? Increase<A> extends number
    ? Plus<Increase<A>, Decrease<B>>
    : never
  : never;

/** 两个自然数相减 */
export type Subtract<A extends number, B extends number> = B extends 0
  ? A
  : A extends 0
  ? never
  : Decrease<A> extends number
  ? Decrease<B> extends number
    ? Subtract<Decrease<A>, Decrease<B>>
    : never
  : never;

/** 两个自然数相乘 */
export type Times<
  A extends number,
  B extends number,
  Sum extends number = 0
> = B extends 0
  ? Sum
  : Decrease<B> extends number
  ? Times<A, Decrease<B>, Plus<Sum, A>>
  : never;
