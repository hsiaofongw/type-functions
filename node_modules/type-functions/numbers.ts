import { IsTupleLengthEqualOrGreaterThan, MakeTuple } from "./tuples";

/** 比较数字的大小 */
export type GreaterThanOrEqual<
  X extends number,
  Y extends number
> = IsTupleLengthEqualOrGreaterThan<MakeTuple<X>, MakeTuple<Y>>;

type GetMinImpl<
  MinValue extends number,
  LhsArray extends [...any],
  RhsArray extends [...any]
> = RhsArray extends []
  ? { minValue: MinValue; restArray: LhsArray }
  : RhsArray extends [infer HeadT, ...infer RestT]
  ? HeadT extends number
    ? GreaterThanOrEqual<MinValue, HeadT> extends true
      ? GetMinImpl<HeadT, [MinValue, ...LhsArray], RestT>
      : GetMinImpl<MinValue, [HeadT, ...LhsArray], RestT>
    : GetMinImpl<MinValue, LhsArray, RestT>
  : never;

/** 取非空数字元组的最小元素 */
export type GetMin<T> = T extends []
  ? never
  : T extends [infer HeadT, ...infer Rest]
  ? HeadT extends number
    ? GetMinImpl<HeadT, [], Rest>
    : GetMin<Rest>
  : never;

/** 对数字元组进行排序 */
export type SortNumsAscending<NumsT> = NumsT extends []
  ? []
  : NumsT extends [infer HeadT, ...infer RestT]
  ? HeadT extends number
    ? [
        GetMin<[HeadT, ...RestT]>["minValue"],
        ...SortNumsAscending<GetMin<[HeadT, ...RestT]>["restArray"]>
      ]
    : SortNumsAscending<RestT>
  : never;
