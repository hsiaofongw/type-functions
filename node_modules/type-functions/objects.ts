import { If, NullableTest } from "./base";

/** 用 key 构造 object 类型 */
export type ConstructObjectTypeByKey<T extends string, ValueT> = {
  [KeyT in T]: ValueT;
};

/** 用 infer 类型推导功能实现 keyof 操作符 */
export type InferBasedKeyof<T> = T extends ConstructObjectTypeByKey<
  infer KeysT,
  any
>
  ? KeysT
  : never;

/** 给一个 object 类型的各字段都加上 optional 修饰（? 修饰，也叫问号修饰） */
export type AddOptionalToFields<T extends object> = {
  [Property in keyof T]+?: T[Property];
};

/** 去掉 optional 修饰 */
export type RemoveOptionalFromFields<T extends object> = {
  [Property in keyof T]-?: T[Property];
};

/** 递归地去掉 optional 修饰 */
export type RecursivelyRemoveOptionalFromFields<T> = T extends object
  ? {
      [Property in keyof T]-?: RecursivelyRemoveOptionalFromFields<T[Property]>;
    }
  : T;

/** 递归地加上 optional 修饰 */
export type RecursivelyAddOptionalToFields<T> = T extends object
  ? {
      [Property in keyof T]+?: RecursivelyAddOptionalToFields<T[Property]>;
    }
  : T;

/** 获取非 optional 字段 */
export type ExtractNonOptionalProperties<T extends object> = {
  [Key in keyof T as If<NullableTest<T[Key]>, never, Key>]: T[Key];
};

/** 获取 optional 字段 */
export type ExtractOptionalProperties<T extends object> = {
  [Key in keyof T as If<NullableTest<T[Key]>, Key, never>]: T[Key];
};
