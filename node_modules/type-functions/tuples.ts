import { Rest } from "./base";

/** 连接两个 Tuple */
export type ConcatTuple<T, S> = T extends [...args: infer X]
  ? S extends [...args: infer Y]
    ? [...X, ...Y]
    : never
  : never;

/** 构造给定长度的 Tuple */
type MakeTupleImpl<
  Len extends number,
  T extends [...any],
  EleT
> = T["length"] extends Len ? T : MakeTupleImpl<Len, [EleT, ...T], EleT>;

export type MakeTuple<Len extends number, EleT = undefined> = MakeTupleImpl<
  Len,
  [],
  EleT
>;

/** 比较两个 Tuple 的长度 */
export type IsTupleLengthEqualOrGreaterThan<
  T1 extends [...any],
  T2 extends [...any]
> = T1["length"] extends T2["length"]
  ? true
  : T2["length"] extends 0
  ? true
  : T1["length"] extends 0
  ? false
  : IsTupleLengthEqualOrGreaterThan<Rest<T1>, Rest<T2>>;

/** Tuple 从属关系判定：给定的元素在元组中是否存在？ */
export type TupleElementTest<EleT, TupleT> = TupleT extends []
  ? false
  : TupleT extends [infer HeadT, ...infer Rest]
  ? HeadT extends EleT
    ? EleT extends HeadT
      ? true
      : TupleElementTest<EleT, Rest>
    : TupleElementTest<EleT, Rest>
  : false;
