
/** 连接两个 Tuple */
export type ConcatTuple<T, S> = T extends [...args: infer X] ? (S extends [...args: infer Y] ? [...X, ...Y] : never ) : never

/** 取 Tuple 首元素 */
export type GetFirstFromTuple<T> = T extends [infer HeadT, ...infer _] ? HeadT : never;

/** 取 Tuple 余项 */
export type GetRestFromTuple<T> = T extends [infer HeadT, ...infer RestT] ? RestT : never;

/** 构造给定长度的 Tuple */
type MakeTupleImpl<Len extends number, T extends [...any], EleT> = T['length'] extends Len ? T : MakeTupleImpl<Len, [EleT, ...T], EleT>;
export type MakeTuple<Len extends number, EleT> = MakeTupleImpl<Len, [], EleT>;

/** 比较两个 Tuple 的长度 */
type Rest<T> = GetFirstFromTuple<T>
export type IsTupleLengthEqualOrGreaterThan<T1 extends [...any], T2 extends [...any]> = 
 T1['length'] extends T2['length'] ? true :
 T2['length'] extends 0 ? true :
 T1['length'] extends 0 ? false :
 IsTupleLengthEqualOrGreaterThan<Rest<T1>, Rest<T2>>;
